*********************************************

ANSIBLE Scenarios :

*********************************************


1) If else loop in ansible Jinja templates :
{% if ansible_distribution_release != 'NA' %}
deb http://packages.dotdeb.org {{ ansible_distribution_release }} all
deb-src http://packages.dotdeb.org {{ ansible_distribution_release }} all
{% else %}
deb http://packages.dotdeb.org squeeze all
deb-src http://packages.dotdeb.org squeeze all
{% endif %}


2) How check a file exists in ansible?
You can first check that the destination file exists or not and then make a decision based on the output of it's result.

tasks:
  - name: Check that the somefile.conf exists
    stat:
      path: /etc/file.txt
    register: stat_result

  - name: Create the file, if it doesnt exist already
    file:
      path: /etc/file.txt
      state: touch
    when: stat_result.stat.exists == False 
	
	
	or 
	
	- stat: path=/path/to/something
  register: p

- debug: msg="Path exists and is a directory"
  when: p.stat.isdir is defined and p.stat.isdir
  
  
3) Install set of softwares using yum where list are maintained in vars file?
- name: installing basic components via yum
  yum: 
    name={{ item }} 
    state=present
    update_cache=yes
  with_items: '{{common.packages}}'
  when: ansible_os_family == "RedHat" 
  tags:
    - common
	
And in roles/common/vars/redhat.yml 

common:
  packages:
    - htop
    - mc
    - tmux
    - vim
    - unzip
    - libselinux-python
	
	
	
4) Move files on remote system, only if destination doesn't exist, with Ansible
---
- hosts: all
  vars:
    dirs:
      - src: /home/ubuntu/src/test/src1
        dest: /home/ubuntu/src/test/dest1
      - src: /home/ubuntu/src/test/src2
        dest: /home/ubuntu/src/test/dest2
  tasks:
    - stat:
        path: "{{item.dest}}"
      with_items: dirs
      register: dirs_stat
    - debug:
        msg: "should not copy {{ item.0.src }}"
      with_together:
        - dirs
        - dirs_stat.results
      when: item.1.stat.exists

with_together does below things :	  
Creates a list with the iterated elements of the supplied lists
To clarify with an example, [ ‘a’, ‘b’ ] and [ 1, 2 ] turn into [ (‘a’,1), (‘b’, 2) ]
This is basicaly the same as the ‘zip_longest’ filter and Python function	


	  
5) How to store results registers with multiple items iterated with "with_items"?
Starting in Ansible 1.6.1, the results registered with multiple items are stored in result.results as an array. So you can use result.results[0].stdout and so on.

---
- hosts: localhost
  gather_facts: no
  tasks:
    - command: "echo {{item}}"
      register: result
      with_items: [1, 2]
    - debug:
        var: result
	
	
*6) Exception Handling in Ansible :
If there is a string "FAILED" in output, based on that you should fail the task, how do you handle it?

In older version of ansible :
- name: this command prints FAILED when it fails
  command: /usr/bin/example-command -x -y -z
  register: command_result
  ignore_errors: True

- name: fail the play if the previous command did not succeed
  fail: msg="the command failed"
  when: "'FAILED' in command_result.stderr"
  
 In newer version of Ansible :
  - name: Fail task when the command error output prints FAILED
  command: /usr/bin/example-command -x -y -z
  register: command_result
  failed_when: "'FAILED' in command_result.stderr"
  
  or based on return code :
  - name: Fail task when both files are identical
  raw: diff foo/file1 bar/file2
  register: diff_cmd
  failed_when: diff_cmd.rc == 0 or diff_cmd.rc >= 2
  
  Note : rc stands for return code

7) Difference between ansible_vars and set_facts?

Ansible also allows you to set a fact (effectively the same as defining a new variable) in a task using the set_fact module. I often like to use set_fact immediately after register to make it simpler to refer to a variable. 

- set_fact: snap={{ snap_result.stdout }}


8) Ansible lookups?
Ansible lookups are really useful for injecting dynamic data into your plays. You can use lookups for situations where you want to add a timestamp comment to a file, record the user running the playbook, generate random passwords, or fetch config values from etcd.

File lookups :
************
Contents can be read off the filesystem as follows:
- hosts: all
  vars:
     contents: "{{ lookup('file', '/etc/foo.txt') }}"

  tasks:

     - debug: msg="the value of foo.txt is {{ contents }}"
	 
	 
passwd lookups:
************
---
- hosts: all

  tasks:

    - name: create a mysql user with a random password
      mysql_user:
        name: "{{ client }}"
        password: "{{ lookup('password', 'credentials/' + client + '/' + tier + '/' + role + '/mysqlpassword length=15') }}"
        priv: "{{ client }}_{{ tier }}_{{ role }}.*:ALL"


environment lookups:
************
- debug: msg="{{ lookup('env','HOME') }} is an environment variable"

pipe lookups:
************
debug: msg="{{ lookup('pipe','date') }} 
or
- name: lookups in variables vs. lookups in facts
  hosts: localhost
  vars:
    var_time: "Var: {{lookup('pipe', 'date \"+%H:%M:%S\"')}}"
	
___________________________________________________________________________________

9) Ansible Conditionals?

**When Statement :
*******************
Sometimes you will want to skip a particular step on a particular host. This could be something as simple as not installing a certain package if the operating system is a particular version, or it could be something like performing some cleanup steps if a filesystem is getting full.

tasks:
  - name: "shut down Debian flavored systems"
    command: /sbin/shutdown -t now
    when: ansible_os_family == "Debian"
	
	You can also use parentheses to group conditions:
	
tasks:
  - name: "shut down CentOS 6 and Debian 7 systems"
    command: /sbin/shutdown -t now
    when: (ansible_distribution == "CentOS" and ansible_distribution_major_version == "6") or
          (ansible_distribution == "Debian" and ansible_distribution_major_version == "7")
		  
	Multiple conditions that all need to be true (a logical ‘and’) can also be specified as a list:

tasks:
  - name: "shut down CentOS 6 systems"
    command: /sbin/shutdown -t now
    when:
      - ansible_distribution == "CentOS"
      - ansible_distribution_major_version == "6"
	  
	A number of Jinja2 “filters” can also be used in when statements, some of which are unique and provided by Ansible. Suppose we want to ignore the error of one statement and then decide to do something conditionally based on success or failure:
	
tasks:
  - command: /bin/false
    register: result
    ignore_errors: True

  - command: /bin/something
    when: result|failed

  # In older versions of ansible use |success, now both are valid but succeeded uses the correct tense.
  - command: /bin/something_else
    when: result|succeeded

  - command: /bin/still/something_else
    when: result|skipped
	
Variables defined in the playbooks or inventory can also be used. An example may be the execution of a task based on a variable’s boolean value:
 vars:
  epic: true
  
  Then a conditional execution might look like:

  tasks:
    - shell: echo "This certainly is epic!"
      when: epic
	  
or:

	tasks:
    - shell: echo "This certainly isn't epic!"
      when: not epic
	  
	tasks:
    - shell: echo "I've got '{{ foo }}' and am not afraid to use it!"
      when: foo is defined

    - fail: msg="Bailing out. this play requires 'bar'"
      when: bar is undefined
	  
	  
Loops :
tasks:
    - command: echo {{ item }}
      with_items: [ 0, 2, 4, 6, 8, 10 ]
      when: item > 5
	 
Or with a role:

- hosts: webservers
  roles:
     - { role: debian_stock_config, when: ansible_os_family == 'Debian' }
	 
# include a file to define a variable when it is not already defined

# main.yml
- include_tasks: other_tasks.yml
  when: x is not defined

# other_tasks.yml
- set_fact:
    x: foo
- debug:
    var: x
	
conditional imports :

---
- hosts: all
  remote_user: root
  vars_files:
    - "vars/common.yml"
    - [ "vars/{{ ansible_os_family }}.yml", "vars/os_defaults.yml" ]
  tasks:
  - name: make sure apache is started
    service: name={{ apache }} state=started
___________________________________________________________________________________	

10) Variables ?
